-- Oracle Tablespace Historical Growth Analysis Script
-- This script prompts for a tablespace name and displays historical growth data
-- Requires Oracle Database with AWR (Automatic Workload Repository) enabled

SET PAGESIZE 1000
SET LINESIZE 150
SET ECHO OFF
SET FEEDBACK OFF
SET VERIFY OFF
WHENEVER SQLERROR EXIT SQL.SQLCODE

-- Prompt for tablespace name
ACCEPT tablespace_name CHAR PROMPT 'Enter Tablespace Name: '

-- Clear screen and show header
CLEAR SCREEN

PROMPT ================================================================================
PROMPT                    TABLESPACE HISTORICAL GROWTH ANALYSIS
PROMPT ================================================================================
PROMPT

-- Validate tablespace exists
SET SERVEROUTPUT ON
DECLARE
    v_count NUMBER;
    v_ts_name VARCHAR2(30) := UPPER('&tablespace_name');
BEGIN
    SELECT COUNT(*) INTO v_count 
    FROM dba_tablespaces 
    WHERE UPPER(tablespace_name) = v_ts_name;
    
    IF v_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: Tablespace "' || v_ts_name || '" does not exist!');
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Available tablespaces:');
        FOR ts_rec IN (SELECT tablespace_name FROM dba_tablespaces ORDER BY tablespace_name) LOOP
            DBMS_OUTPUT.PUT_LINE('  - ' || ts_rec.tablespace_name);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Please re-run the script with a valid tablespace name.');
        RAISE_APPLICATION_ERROR(-20001, 'Invalid tablespace name: ' || v_ts_name);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Tablespace "' || v_ts_name || '" found. Proceeding with analysis...');
        DBMS_OUTPUT.PUT_LINE('');
    END IF;
END;
/

-- Display tablespace basic information
PROMPT Current Tablespace Information:
PROMPT --------------------------------

SELECT 
    ts.tablespace_name,
    ts.status,
    ts.contents,
    ts.extent_management,
    ts.allocation_type,
    ts.segment_space_management
FROM dba_tablespaces ts
WHERE UPPER(ts.tablespace_name) = UPPER('&tablespace_name');

PROMPT

-- Display current size and usage
PROMPT Current Size and Usage:
PROMPT -----------------------

SELECT 
    df.tablespace_name,
    ROUND(SUM(df.bytes)/1024/1024/1024, 2) AS "Total Size (GB)",
    ROUND(SUM(df.bytes - NVL(fs.bytes, 0))/1024/1024/1024, 2) AS "Used Size (GB)",
    ROUND(SUM(NVL(fs.bytes, 0))/1024/1024/1024, 2) AS "Free Size (GB)",
    ROUND((SUM(df.bytes - NVL(fs.bytes, 0)) / SUM(df.bytes)) * 100, 2) AS "Used %"
FROM 
    (SELECT tablespace_name, SUM(bytes) bytes 
     FROM dba_data_files 
     WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
     GROUP BY tablespace_name) df,
    (SELECT tablespace_name, SUM(bytes) bytes 
     FROM dba_free_space 
     WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
     GROUP BY tablespace_name) fs
WHERE df.tablespace_name = fs.tablespace_name(+)
GROUP BY df.tablespace_name;

PROMPT

-- Check AWR availability and show message
DECLARE
    v_awr_enabled VARCHAR2(10);
    v_ts_name VARCHAR2(30) := UPPER('&tablespace_name');
BEGIN
    -- Check if AWR is enabled
    SELECT value INTO v_awr_enabled 
    FROM v$parameter 
    WHERE name = 'statistics_level';
    
    IF v_awr_enabled != 'TYPICAL' AND v_awr_enabled != 'ALL' THEN
        DBMS_OUTPUT.PUT_LINE('INFO: AWR is not enabled (statistics_level = ' || v_awr_enabled || ')');
        DBMS_OUTPUT.PUT_LINE('Historical analysis requires AWR to be enabled.');
        DBMS_OUTPUT.PUT_LINE('Current information will be displayed only.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('AWR is enabled. Attempting historical analysis...');
    END IF;
    DBMS_OUTPUT.PUT_LINE('');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('INFO: Cannot determine AWR status. Proceeding with analysis...');
        DBMS_OUTPUT.PUT_LINE('');
END;
/

-- Display historical growth data from AWR
PROMPT Historical Growth Data (Last 30 Days):
PROMPT ======================================

-- Try alternative AWR approach first, fallback to current info only
SELECT 
    TO_CHAR(s.begin_interval_time, 'YYYY-MM-DD HH24:MI') AS "Snapshot Time",
    'N/A - Check AWR Setup' AS "Size (MB)",
    'N/A - Check AWR Setup' AS "Used (MB)", 
    'N/A - Check AWR Setup' AS "Used %",
    'Historical data requires' AS "Note"
FROM 
    dba_hist_snapshot s
WHERE 
    s.begin_interval_time >= SYSDATE - 7
    AND ROWNUM <= 10
ORDER BY s.begin_interval_time DESC;

PROMPT

-- Growth summary (alternative approach)
PROMPT Growth Summary and Recommendations:
PROMPT ===================================

SELECT 
    '&tablespace_name' AS "Tablespace Name",
    'Current analysis shows:' AS "Summary",
    TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI') AS "Analysis Date"
FROM dual

UNION ALL

SELECT 
    CASE 
        WHEN used_pct > 85 THEN 'HIGH USAGE'
        WHEN used_pct > 70 THEN 'MODERATE USAGE'
        ELSE 'NORMAL USAGE'
    END AS "Status",
    CASE 
        WHEN used_pct > 85 THEN 'Consider adding datafiles or extending existing ones'
        WHEN used_pct > 70 THEN 'Monitor growth closely and plan for expansion'
        ELSE 'Tablespace usage is within normal parameters'
    END AS "Recommendation",
    used_pct || '% used' AS "Current Usage"
FROM (
    SELECT ROUND((SUM(df.bytes - NVL(fs.bytes, 0)) / SUM(df.bytes)) * 100, 2) AS used_pct
    FROM 
        (SELECT SUM(bytes) bytes FROM dba_data_files WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')) df,
        (SELECT SUM(bytes) bytes FROM dba_free_space WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')) fs
);

PROMPT

-- Data files information
PROMPT Tablespace Data Files:
PROMPT =====================

SELECT 
    file_name AS "File Name",
    ROUND(bytes/1024/1024, 2) AS "Size (MB)",
    ROUND(maxbytes/1024/1024, 2) AS "Max Size (MB)",
    autoextensible AS "Auto Extend",
    ROUND(increment_by * (SELECT value FROM v$parameter WHERE name = 'db_block_size')/1024/1024, 2) AS "Increment (MB)",
    status AS "Status"
FROM dba_data_files
WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
ORDER BY file_id;

PROMPT
PROMPT ================================================================================
PROMPT                            ANALYSIS COMPLETE
PROMPT ================================================================================

-- Reset settings
SET PAGESIZE 14
SET LINESIZE 80
SET ECHO ON
SET FEEDBACK ON
SET VERIFY ON

-- Clear the variable
UNDEFINE tablespace_name











-- Oracle Tablespace Historical Growth Analysis Script
-- This script prompts for a tablespace name and displays historical growth data
-- Requires Oracle Database with AWR (Automatic Workload Repository) enabled
-- Modified to include historical used space from DBA_HIST_SEG_STAT and fix UNION ALL issues

SET PAGESIZE 1000
SET LINESIZE 150
SET ECHO OFF
SET FEEDBACK OFF
SET VERIFY OFF
WHENEVER SQLERROR EXIT SQL.SQLCODE

-- Prompt for tablespace name
ACCEPT tablespace_name CHAR PROMPT 'Enter Tablespace Name: '

-- Clear screen and show header
CLEAR SCREEN

PROMPT ================================================================================
PROMPT                    TABLESPACE HISTORICAL GROWTH ANALYSIS
PROMPT ================================================================================
PROMPT

-- Validate tablespace exists
SET SERVEROUTPUT ON
DECLARE
    v_count NUMBER;
    v_ts_name VARCHAR2(30) := UPPER('&tablespace_name');
BEGIN
    SELECT COUNT(*) INTO v_count 
    FROM dba_tablespaces 
    WHERE UPPER(tablespace_name) = v_ts_name;
    
    IF v_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: Tablespace "' || v_ts_name || '" does not exist!');
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Available tablespaces:');
        FOR ts_rec IN (SELECT tablespace_name FROM dba_tablespaces ORDER BY tablespace_name) LOOP
            DBMS_OUTPUT.PUT_LINE('  - ' || ts_rec.tablespace_name);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Please re-run the script with a valid tablespace name.');
        RAISE_APPLICATION_ERROR(-20001, 'Invalid tablespace name: ' || v_ts_name);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Tablespace "' || v_ts_name || '" found. Proceeding with analysis...');
        DBMS_OUTPUT.PUT_LINE('');
    END IF;
END;
/

-- Display tablespace basic information
PROMPT Current Tablespace Information:
PROMPT --------------------------------

SELECT 
    ts.tablespace_name,
    ts.status,
    ts.contents,
    ts.extent_management,
    ts.allocation_type,
    ts.segment_space_management
FROM dba_tablespaces ts
WHERE UPPER(ts.tablespace_name) = UPPER('&tablespace_name');

PROMPT

-- Display current size and usage
PROMPT Current Size and Usage:
PROMPT -----------------------

SELECT 
    df.tablespace_name,
    ROUND(SUM(df.bytes)/1024/1024/1024, 2) AS "Total Size (GB)",
    ROUND(SUM(df.bytes - NVL(fs.bytes, 0))/1024/1024/1024, 2) AS "Used Size (GB)",
    ROUND(SUM(NVL(fs.bytes, 0))/1024/1024/1024, 2) AS "Free Size (GB)",
    ROUND((SUM(df.bytes - NVL(fs.bytes, 0)) / SUM(df.bytes)) * 100, 2) AS "Used %"
FROM 
    (SELECT tablespace_name, SUM(bytes) bytes 
     FROM dba_data_files 
     WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
     GROUP BY tablespace_name) df,
    (SELECT tablespace_name, SUM(bytes) bytes 
     FROM dba_free_space 
     WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
     GROUP BY tablespace_name) fs
WHERE df.tablespace_name = fs.tablespace_name(+)
GROUP BY df.tablespace_name;

PROMPT

-- Check AWR availability and show message
DECLARE
    v_awr_enabled VARCHAR2(10);
    v_ts_name VARCHAR2(30) := UPPER('&tablespace_name');
BEGIN
    -- Check if AWR is enabled
    SELECT value INTO v_awr_enabled 
    FROM v$parameter 
    WHERE name = 'statistics_level';
    
    IF v_awr_enabled != 'TYPICAL' AND v_awr_enabled != 'ALL' THEN
        DBMS_OUTPUT.PUT_LINE('INFO: AWR is not enabled (statistics_level = ' || v_awr_enabled || ')');
        DBMS_OUTPUT.PUT_LINE('Historical analysis requires AWR to be enabled.');
        DBMS_OUTPUT.PUT_LINE('Current information will be displayed only.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('AWR is enabled. Attempting historical analysis...');
    END IF;
    DBMS_OUTPUT.PUT_LINE('');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('INFO: Cannot determine AWR status. Proceeding with analysis...');
        DBMS_OUTPUT.PUT_LINE('');
END;
/

-- Define block size for historical calculations
COLUMN block_size NEW_VALUE bs
SELECT value AS block_size FROM v$parameter WHERE name = 'db_block_size';

-- Display historical growth data from AWR (used space based on segment stats)
PROMPT Historical Used Space Growth (Last 30 Days):
PROMPT ============================================
PROMPT Note: Approximate used space from segment statistics in AWR. Total size history not available without custom monitoring.

WITH hist_usage AS (
    SELECT 
        s.snap_id,
        s.begin_interval_time,
        SUM(ss.blocks) AS total_blocks
    FROM 
        dba_hist_snapshot s,
        dba_hist_seg_stat ss
    WHERE 
        s.snap_id = ss.snap_id
        AND ss.ts# = (SELECT ts# FROM sys.ts$ WHERE UPPER(name) = UPPER('&tablespace_name'))
        AND s.begin_interval_time >= SYSDATE - 30
    GROUP BY s.snap_id, s.begin_interval_time
)
SELECT 
    TO_CHAR(begin_interval_time, 'YYYY-MM-DD HH24:MI') AS "Snapshot Time",
    ROUND(total_blocks * &bs / 1024 / 1024, 2) AS "Used Space (MB)",
    LAG(ROUND(total_blocks * &bs / 1024 / 1024, 2)) OVER (ORDER BY snap_id) AS "Previous Used (MB)",
    ROUND((total_blocks * &bs / 1024 / 1024) - LAG(total_blocks * &bs / 1024 / 1024) OVER (ORDER BY snap_id), 2) AS "Growth (MB)",
    ROUND((total_blocks * &bs / 1024 / 1024) / 
          (SELECT SUM(bytes) / 1024 / 1024 FROM dba_data_files WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')), 2) AS "Used % (Current Total)"
FROM hist_usage
ORDER BY snap_id DESC;

PROMPT

-- Growth summary and recommendations (fixed with WITH clause)
PROMPT Growth Summary and Recommendations:
PROMPT ===================================

WITH usage AS (
    SELECT 
        ROUND((SUM(df.bytes - NVL(fs.bytes, 0)) / SUM(df.bytes)) * 100, 2) AS used_pct
    FROM 
        (SELECT SUM(bytes) AS bytes FROM dba_data_files WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')) df,
        (SELECT SUM(bytes) AS bytes FROM dba_free_space WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')) fs
)
SELECT 
    '&tablespace_name' AS "Tablespace Name",
    CASE 
        WHEN u.used_pct > 85 THEN 'HIGH USAGE - Consider adding datafiles or extending existing ones'
        WHEN u.used_pct > 70 THEN 'MODERATE USAGE - Monitor growth closely and plan for expansion'
        ELSE 'NORMAL USAGE - Tablespace usage is within normal parameters'
    END AS "Summary and Recommendation",
    TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI') AS "Analysis Date",
    ROUND(u.used_pct, 2) || '%' AS "Current Usage %"
FROM usage u;

PROMPT

-- Data files information
PROMPT Tablespace Data Files:
PROMPT =====================

SELECT 
    file_name AS "File Name",
    ROUND(bytes/1024/1024, 2) AS "Size (MB)",
    ROUND(maxbytes/1024/1024, 2) AS "Max Size (MB)",
    autoextensible AS "Auto Extend",
    ROUND(increment_by * (SELECT value FROM v$parameter WHERE name = 'db_block_size')/1024/1024, 2) AS "Increment (MB)",
    status AS "Status"
FROM dba_data_files
WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
ORDER BY file_id;

PROMPT
PROMPT ================================================================================
PROMPT                            ANALYSIS COMPLETE
PROMPT ================================================================================

-- Reset settings
SET PAGESIZE 14
SET LINESIZE 80
SET ECHO ON
SET FEEDBACK ON
SET VERIFY ON

-- Clear the variable
UNDEFINE tablespace_name
UNDEFINE bs





set line 500
with t as (
select ss.run_time,ts.name,round(su.tablespace_size*dt.block_size/1024/1024/1024,2) alloc_size_gb,
round(su.tablespace_usedsize*dt.block_size/1024/1024/1024,2) used_size_gb
from
dba_hist_tbspc_space_usage su,
(select trunc(BEGIN_INTERVAL_TIME) run_time,max(snap_id) snap_id from dba_hist_snapshot
group by trunc(BEGIN_INTERVAL_TIME) ) ss,
v$tablespace ts,
dba_tablespaces dt
where su.snap_id = ss.snap_id
and su.tablespace_id = ts.ts#
and ts.name =upper('&tablespace_name')
and ts.name = dt.tablespace_name )
select e.run_time,e.name,e.alloc_size_gb,e.used_size_gb curr_used_size_gb,
b.used_size_gb prev_used_size_gb,
case when e.used_size_gb > b.used_size_gb
then to_char(e.used_size_gb - b.used_size_gb)
when e.used_size_gb = b.used_size_gb
then '***NO DATA GROWTH'
when e.used_size_gb < b.used_size_gb
then '******DATA PURGED' end variance
from t e, t b
where e.run_time = b.run_time + 1
order by 1;

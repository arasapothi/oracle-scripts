-- Oracle ACL Management Script - Simplified for 19c SYSDBA
-- Description: Enhanced 6-step ACL creation and testing for Oracle 19c
-- Usage: Run as SYSDBA in SQL*Plus
-- ====================================================================

-- SQL*Plus formatting for readability
SET SERVEROUTPUT ON SIZE UNLIMITED
SET PAGESIZE 50000 
SET LINESIZE 220 
SET TRIMSPOOL ON 
SET TAB OFF 
SET VERIFY OFF 
SET FEEDBACK ON
WHENEVER SQLERROR EXIT SQL.SQLCODE ROLLBACK

-- Column formatting for clean display
COLUMN acl FORMAT a60
COLUMN host FORMAT a60 
COLUMN principal FORMAT a30
COLUMN privilege FORMAT a12
COLUMN is_grant FORMAT a5
COLUMN lower_port FORMAT 99999
COLUMN upper_port FORMAT 99999
COLUMN entries FORMAT 999999

-- Clear screen and show header
CLEAR SCREEN

PROMPT ====================================================================
PROMPT           Oracle 19c ACL Management Script (SYSDBA)
PROMPT ====================================================================
PROMPT Simple 6-step process for ACL creation and testing
PROMPT ====================================================================

-- Variable declarations
DEFINE acl_name = ''
DEFINE host_name = ''
DEFINE principal = ''
DEFINE lower_port = ''
DEFINE upper_port = ''
DEFINE continue_step = ''

-- ====================================================================
-- STEP 1: Show ACL host/port assignments summary
-- ====================================================================

PROMPT 
PROMPT ====================================================================
PROMPT STEP 1: Current ACL Host/Port Assignments
PROMPT ====================================================================

SELECT 
    host,
    lower_port,
    upper_port,
    COUNT(*) as entries
FROM dba_network_acls 
GROUP BY host, lower_port, upper_port 
ORDER BY host, lower_port;

PROMPT 
PROMPT Total host/port combinations:
SELECT COUNT(DISTINCT host||':'||lower_port||'-'||upper_port) as "Total Assignments" 
FROM dba_network_acls;

PROMPT 
ACCEPT continue_step PROMPT 'Continue to Step 2? (Y/N): '

DECLARE
    v_continue VARCHAR2(10) := UPPER('&continue_step');
BEGIN
    IF v_continue NOT IN ('Y', 'YES') THEN
        RAISE_APPLICATION_ERROR(-20100, 'Script terminated by user.');
    END IF;
END;
/

-- ====================================================================
-- STEP 2: Show principal/privilege summary
-- ====================================================================

PROMPT 
PROMPT ====================================================================
PROMPT STEP 2: Current Principal/Privilege Summary  
PROMPT ====================================================================

SELECT 
    principal,
    privilege,
    is_grant,
    COUNT(*) as entries
FROM dba_network_acl_privileges 
GROUP BY principal, privilege, is_grant 
ORDER BY principal, privilege;

PROMPT 
PROMPT Total privilege assignments:
SELECT COUNT(*) as "Total Privileges" FROM dba_network_acl_privileges;

PROMPT 
ACCEPT continue_step PROMPT 'Continue to Step 3? (Y/N): '

DECLARE
    v_continue VARCHAR2(10) := UPPER('&continue_step');
BEGIN
    IF v_continue NOT IN ('Y', 'YES') THEN
        RAISE_APPLICATION_ERROR(-20101, 'Script terminated by user.');
    END IF;
END;
/

-- ====================================================================
-- STEP 3: Collect ACL parameters with validation
-- ====================================================================

PROMPT 
PROMPT ====================================================================
PROMPT STEP 3: Enter ACL Parameters
PROMPT ====================================================================

ACCEPT acl_name PROMPT 'Enter ACL name for logging (e.g., my_test_acl): '
ACCEPT host_name PROMPT 'Enter hostname/IP (e.g., google.com or 8.8.8.8): '
ACCEPT principal PROMPT 'Enter database user/principal (e.g., HR): '
ACCEPT lower_port PROMPT 'Enter lower port (e.g., 80, 443, 1521): '
ACCEPT upper_port PROMPT 'Enter upper port (same as lower for single port, e.g., 80, 443, 1521): '

-- Validate inputs
DECLARE
    v_host VARCHAR2(200) := TRIM('&host_name');
    v_principal VARCHAR2(200) := TRIM(UPPER('&principal')); -- Ensure principal is uppercase
    v_lower_port NUMBER;
    v_upper_port NUMBER;
    v_user_count NUMBER;
    v_host_ip VARCHAR2(100);
BEGIN
    -- Validate principal existence
    SELECT COUNT(*) INTO v_user_count 
    FROM dba_users 
    WHERE username = v_principal;
    
    IF v_user_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20102, 'Invalid principal: User ' || v_principal || ' does not exist.');
    END IF;
    
    -- Validate port inputs
    BEGIN
        v_lower_port := TO_NUMBER(TRIM('&lower_port'));
        v_upper_port := TO_NUMBER(TRIM('&upper_port'));
        
        IF v_lower_port < 1 OR v_lower_port > 65535 OR v_upper_port < 1 OR v_upper_port > 65535 THEN
            RAISE_APPLICATION_ERROR(-20103, 'Invalid port range: Ports must be between 1 and 65535.');
        END IF;
        
        IF v_lower_port > v_upper_port THEN
            RAISE_APPLICATION_ERROR(-20104, 'Invalid port range: lower_port must be less than or equal to upper_port.');
        END IF;
    EXCEPTION
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20105, 'Invalid port input: Ports must be numeric.');
    END;
    
    -- Validate hostname resolution
    BEGIN
        v_host_ip := UTL_INADDR.GET_HOST_ADDRESS(v_host);
        DBMS_OUTPUT.PUT_LINE('✓ Hostname resolved successfully: ' || v_host || ' -> ' || v_host_ip);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('⚠ Warning: Could not resolve hostname ' || v_host || ' (' || SQLERRM || ').');
            DBMS_OUTPUT.PUT_LINE('Proceeding with raw hostname input, but this may cause ORA-24244.');
    END;
    
    DBMS_OUTPUT.PUT_LINE('✓ Input validation passed');
    DBMS_OUTPUT.PUT_LINE('  Host: ' || v_host);
    DBMS_OUTPUT.PUT_LINE('  Principal: ' || v_principal);
    DBMS_OUTPUT.PUT_LINE('  Port Range: ' || v_lower_port || '-' || v_upper_port);
END;
/

PROMPT 
ACCEPT continue_step PROMPT 'Continue to Step 4? (Y/N): '

DECLARE
    v_continue VARCHAR2(10) := UPPER('&continue_step');
BEGIN
    IF v_continue NOT IN ('Y', 'YES') THEN
        RAISE_APPLICATION_ERROR(-20106, 'Script terminated by user.');
    END IF;
END;
/

-- ====================================================================
-- STEP 4: Check if ACL already exists for this host/port
-- ====================================================================

PROMPT 
PROMPT ====================================================================
PROMPT STEP 4: Checking existing ACL for host/port
PROMPT ====================================================================

DECLARE
    v_host VARCHAR2(200) := TRIM('&host_name');
    v_lower_port NUMBER := TO_NUMBER(TRIM('&lower_port'));
    v_upper_port NUMBER := TO_NUMBER(TRIM('&upper_port'));
    v_count NUMBER;
BEGIN
    -- Check for existing ACL
    SELECT COUNT(*) INTO v_count 
    FROM dba_network_acls 
    WHERE host = v_host 
    AND (lower_port = v_lower_port OR lower_port IS NULL)
    AND (upper_port = v_upper_port OR upper_port IS NULL);
    
    IF v_count > 0 THEN
        DBMS_OUTPUT.PUT_LINE('⚠ Warning: ACL already exists for host ' || v_host || ' on port range ' || v_lower_port || '-' || v_upper_port);
        DBMS_OUTPUT.PUT_LINE('Proceeding to append privileges.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('✓ No existing ACL found for host ' || v_host || ' on port range ' || v_lower_port || '-' || v_upper_port);
    END IF;
END;
/

PROMPT 
ACCEPT continue_step PROMPT 'Continue to Step 5 (Create/Update ACL)? (Y/N): '

DECLARE
    v_continue VARCHAR2(10) := UPPER('&continue_step');
BEGIN
    IF v_continue NOT IN ('Y', 'YES') THEN
        RAISE_APPLICATION_ERROR(-20107, 'Script terminated by user.');
    END IF;
END;
/

-- ====================================================================
-- STEP 5: Create or Append ACL
-- ====================================================================

PROMPT 
PROMPT ====================================================================
PROMPT STEP 5: Creating/Updating ACL using APPEND_HOST_ACE
PROMPT ====================================================================

DECLARE
    v_host VARCHAR2(200) := TRIM('&host_name');
    v_principal VARCHAR2(200) := TRIM(UPPER('&principal')); -- Ensure principal is uppercase
    v_lower_port NUMBER := TO_NUMBER(TRIM('&lower_port'));
    v_upper_port NUMBER := TO_NUMBER(TRIM('&upper_port'));
BEGIN
    DBMS_OUTPUT.PUT_LINE('Creating/Updating ACL with parameters:');
    DBMS_OUTPUT.PUT_LINE('  Host: ' || v_host); -- No single quotes added, as v_host is a string
    DBMS_OUTPUT.PUT_LINE('  Port Range: ' || v_lower_port || '-' || v_upper_port);
    DBMS_OUTPUT.PUT_LINE('  Principal: ' || v_principal);
    DBMS_OUTPUT.PUT_LINE('');

    -- Append ACL using APPEND_HOST_ACE
    DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE(
        host => v_host, -- Pass the raw string, no quotes needed
        lower_port => v_lower_port,
        upper_port => v_upper_port,
        ace => xs$ace_type(
            privilege_list => xs$name_list('connect', 'resolve'),
            principal_name => v_principal,
            principal_type => xs_acl.ptype_db
        )
    );

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('✓ ACL created/updated successfully');
    DBMS_OUTPUT.PUT_LINE('✓ Granted connect and resolve privileges');
    DBMS_OUTPUT.PUT_LINE('✓ Changes committed');

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('✗ ERROR: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('✗ All changes rolled back');
        DBMS_OUTPUT.PUT_LINE('Possible causes:');
        DBMS_OUTPUT.PUT_LINE('- Invalid or unresolvable hostname. Try using an IP address or verify DNS.');
        DBMS_OUTPUT.PUT_LINE('- Invalid principal. Ensure the user exists (check dba_users).');
        DBMS_OUTPUT.PUT_LINE('- Port conflict or invalid port range.');
        RAISE;
END;
/

PROMPT 
ACCEPT continue_step PROMPT 'Continue to Step 6 (Test ACL)? (Y/N): '

DECLARE
    v_continue VARCHAR2(10) := UPPER('&continue_step');
BEGIN
    IF v_continue NOT IN ('Y', 'YES') THEN
        DBMS_OUTPUT.PUT_LINE('ACL creation completed successfully.');
        RAISE_APPLICATION_ERROR(-20108, 'Script completed - testing skipped.');
    END IF;
END;
/

-- ====================================================================
-- STEP 6: Verify and test ACL
-- ====================================================================

PROMPT 
PROMPT ====================================================================
PROMPT STEP 6: ACL Verification and Connectivity Test
PROMPT ====================================================================

DECLARE
    v_host VARCHAR2(200) := TRIM('&host_name');
    v_principal VARCHAR2(200) := TRIM(UPPER('&principal'));
    v_lower_port NUMBER := TO_NUMBER(TRIM('&lower_port'));
    v_upper_port NUMBER := TO_NUMBER(TRIM('&upper_port'));
    v_count NUMBER;
BEGIN
    -- Verify ACL existence
    SELECT COUNT(*) INTO v_count 
    FROM dba_network_acl_privileges 
    WHERE principal = v_principal 
    AND privilege IN ('connect', 'resolve');

    IF v_count >= 2 THEN
        DBMS_OUTPUT.PUT_LINE('✓ ACL verification passed: Privileges granted for ' || v_principal);
    ELSE
        DBMS_OUTPUT.PUT_LINE('⚠ Warning: ACL privileges not found for ' || v_principal);
    END IF;

    DBMS_OUTPUT.PUT_LINE('=== ACL CREATED ===');
    DBMS_OUTPUT.PUT_LINE('✓ ACL created with parameters:');
    DBMS_OUTPUT.PUT_LINE('  Host: ' || v_host);
    DBMS_OUTPUT.PUT_LINE('  Principal: ' || v_principal);
    DBMS_OUTPUT.PUT_LINE('  Port Range: ' || v_lower_port || '-' || v_upper_port);
END;
/

-- Final summary
PROMPT 
PROMPT ====================================================================
PROMPT                        SCRIPT COMPLETED
PROMPT ====================================================================
PROMPT ACL Name: &acl_name
PROMPT Host: &host_name  
PROMPT Principal: &principal
PROMPT Port Range: &lower_port - &upper_port
PROMPT ====================================================================

-- Clean up
UNDEFINE acl_name
UNDEFINE host_name
UNDEFINE principal  
UNDEFINE lower_port
UNDEFINE upper_port
UNDEFINE continue_step

-- Reset settings
SET VERIFY ON
SET FEEDBACK ON



BEGIN
    DBMS_NETWORK_ACL_ADMIN.APPEND_HOST_ACE(
        host => 'smtp.de.bosch.com',

lower_port => 443,

upper_port => 443,

        ace => xs$ace_type(privilege_list => xs$name_list('connect'),
                           principal_name => 'test',
                           principal_type => xs_acl.ptype_db));

    COMMIT;

END;
/

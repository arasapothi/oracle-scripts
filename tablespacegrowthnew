-- Oracle Tablespace Historical Growth Analysis Script
-- This script prompts for a tablespace name and displays historical growth data
-- Requires Oracle Database with AWR (Automatic Workload Repository) enabled

SET PAGESIZE 1000
SET LINESIZE 150
SET ECHO OFF
SET FEEDBACK OFF
SET VERIFY OFF
WHENEVER SQLERROR EXIT SQL.SQLCODE

-- Prompt for tablespace name
ACCEPT tablespace_name CHAR PROMPT 'Enter Tablespace Name: '

-- Clear screen and show header
CLEAR SCREEN

PROMPT ================================================================================
PROMPT                    TABLESPACE HISTORICAL GROWTH ANALYSIS
PROMPT ================================================================================
PROMPT

-- Validate tablespace exists
SET SERVEROUTPUT ON
DECLARE
    v_count NUMBER;
    v_ts_name VARCHAR2(30) := UPPER('&tablespace_name');
BEGIN
    SELECT COUNT(*) INTO v_count 
    FROM dba_tablespaces 
    WHERE UPPER(tablespace_name) = v_ts_name;
    
    IF v_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('ERROR: Tablespace "' || v_ts_name || '" does not exist!');
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Available tablespaces:');
        FOR ts_rec IN (SELECT tablespace_name FROM dba_tablespaces ORDER BY tablespace_name) LOOP
            DBMS_OUTPUT.PUT_LINE('  - ' || ts_rec.tablespace_name);
        END LOOP;
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Please re-run the script with a valid tablespace name.');
        RAISE_APPLICATION_ERROR(-20001, 'Invalid tablespace name: ' || v_ts_name);
    ELSE
        DBMS_OUTPUT.PUT_LINE('Tablespace "' || v_ts_name || '" found. Proceeding with analysis...');
        DBMS_OUTPUT.PUT_LINE('');
    END IF;
END;
/

-- Display tablespace basic information
PROMPT Current Tablespace Information:
PROMPT --------------------------------

SELECT 
    ts.tablespace_name,
    ts.status,
    ts.contents,
    ts.extent_management,
    ts.allocation_type,
    ts.segment_space_management
FROM dba_tablespaces ts
WHERE UPPER(ts.tablespace_name) = UPPER('&tablespace_name');

PROMPT

-- Display current size and usage
PROMPT Current Size and Usage:
PROMPT -----------------------

SELECT 
    df.tablespace_name,
    ROUND(SUM(df.bytes)/1024/1024/1024, 2) AS "Total Size (GB)",
    ROUND(SUM(df.bytes - NVL(fs.bytes, 0))/1024/1024/1024, 2) AS "Used Size (GB)",
    ROUND(SUM(NVL(fs.bytes, 0))/1024/1024/1024, 2) AS "Free Size (GB)",
    ROUND((SUM(df.bytes - NVL(fs.bytes, 0)) / SUM(df.bytes)) * 100, 2) AS "Used %"
FROM 
    (SELECT tablespace_name, SUM(bytes) bytes 
     FROM dba_data_files 
     WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
     GROUP BY tablespace_name) df,
    (SELECT tablespace_name, SUM(bytes) bytes 
     FROM dba_free_space 
     WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
     GROUP BY tablespace_name) fs
WHERE df.tablespace_name = fs.tablespace_name(+)
GROUP BY df.tablespace_name;

PROMPT

-- Check if AWR data is available
DECLARE
    v_awr_count NUMBER;
    v_ts_name VARCHAR2(30) := UPPER('&tablespace_name');
BEGIN
    SELECT COUNT(*) INTO v_awr_count
    FROM dba_hist_tbspc_space_usage h, dba_hist_snapshot s
    WHERE h.snap_id = s.snap_id
      AND h.dbid = s.dbid
      AND h.instance_number = s.instance_number
      AND UPPER(h.tablespace_name) = v_ts_name
      AND s.begin_interval_time >= SYSDATE - 30;
    
    IF v_awr_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('WARNING: No AWR historical data found for tablespace "' || v_ts_name || '"');
        DBMS_OUTPUT.PUT_LINE('This could mean:');
        DBMS_OUTPUT.PUT_LINE('  - AWR is not enabled on this database');
        DBMS_OUTPUT.PUT_LINE('  - Tablespace was created recently (less than 30 days ago)');
        DBMS_OUTPUT.PUT_LINE('  - AWR retention period is less than 30 days');
        DBMS_OUTPUT.PUT_LINE('');
        DBMS_OUTPUT.PUT_LINE('Historical analysis will be skipped. Showing current information only.');
        DBMS_OUTPUT.PUT_LINE('');
    ELSE
        DBMS_OUTPUT.PUT_LINE('Found ' || v_awr_count || ' historical data points. Proceeding with trend analysis...');
        DBMS_OUTPUT.PUT_LINE('');
    END IF;
END;
/

-- Display historical growth data from AWR
PROMPT Historical Growth Data (Last 30 Days):
PROMPT ======================================

WITH historical_data AS (
    SELECT 
        s.snap_id,
        s.begin_interval_time,
        s.end_interval_time,
        h.tablespace_name,
        h.tablespace_size,
        h.tablespace_usedsize,
        h.tablespace_maxsize,
        ROUND(h.tablespace_size/1024/1024, 2) AS size_mb,
        ROUND(h.tablespace_usedsize/1024/1024, 2) AS used_mb,
        CASE WHEN h.tablespace_size > 0 THEN ROUND((h.tablespace_usedsize/h.tablespace_size) * 100, 2) ELSE 0 END AS used_pct
    FROM 
        dba_hist_tbspc_space_usage h,
        dba_hist_snapshot s
    WHERE 
        h.snap_id = s.snap_id
        AND h.dbid = s.dbid
        AND h.instance_number = s.instance_number
        AND UPPER(h.tablespace_name) = UPPER('&tablespace_name')
        AND s.begin_interval_time >= SYSDATE - 30
    ORDER BY s.begin_interval_time
),
growth_calc AS (
    SELECT 
        snap_id,
        TO_CHAR(begin_interval_time, 'YYYY-MM-DD HH24:MI') AS snapshot_time,
        tablespace_name,
        size_mb,
        used_mb,
        used_pct,
        size_mb - LAG(size_mb, 1) OVER (ORDER BY begin_interval_time) AS size_growth_mb,
        used_mb - LAG(used_mb, 1) OVER (ORDER BY begin_interval_time) AS usage_growth_mb
    FROM historical_data
)
SELECT * FROM (
    SELECT 
        snapshot_time AS "Snapshot Time",
        ROUND(size_mb, 2) AS "Size (MB)",
        ROUND(used_mb, 2) AS "Used (MB)",
        used_pct AS "Used %",
        CASE 
            WHEN size_growth_mb > 0 THEN '+' || ROUND(size_growth_mb, 2)
            WHEN size_growth_mb < 0 THEN ROUND(size_growth_mb, 2)
            ELSE '0'
        END AS "Size Growth (MB)",
        CASE 
            WHEN usage_growth_mb > 0 THEN '+' || ROUND(usage_growth_mb, 2)
            WHEN usage_growth_mb < 0 THEN ROUND(usage_growth_mb, 2)
            ELSE '0'
        END AS "Usage Growth (MB)"
    FROM growth_calc
    ORDER BY snapshot_time DESC
)
WHERE ROWNUM <= 50;

PROMPT

-- Growth summary statistics
PROMPT Growth Summary (Last 30 Days):
PROMPT ==============================

WITH growth_summary AS (
    SELECT 
        h.tablespace_name,
        MIN(s.begin_interval_time) AS first_snapshot,
        MAX(s.begin_interval_time) AS last_snapshot,
        MIN(h.tablespace_size/1024/1024) AS min_size_mb,
        MAX(h.tablespace_size/1024/1024) AS max_size_mb,
        MIN(h.tablespace_usedsize/1024/1024) AS min_used_mb,
        MAX(h.tablespace_usedsize/1024/1024) AS max_used_mb,
        COUNT(*) AS snapshot_count
    FROM 
        dba_hist_tbspc_space_usage h,
        dba_hist_snapshot s
    WHERE 
        h.snap_id = s.snap_id
        AND h.dbid = s.dbid
        AND h.instance_number = s.instance_number
        AND UPPER(h.tablespace_name) = UPPER('&tablespace_name')
        AND s.begin_interval_time >= SYSDATE - 30
    GROUP BY h.tablespace_name
)
SELECT 
    tablespace_name AS "Tablespace Name",
    TO_CHAR(first_snapshot, 'YYYY-MM-DD HH24:MI') AS "First Snapshot",
    TO_CHAR(last_snapshot, 'YYYY-MM-DD HH24:MI') AS "Last Snapshot",
    ROUND(max_size_mb - min_size_mb, 2) AS "Total Size Growth (MB)",
    ROUND(max_used_mb - min_used_mb, 2) AS "Total Usage Growth (MB)",
    ROUND((max_size_mb - min_size_mb) / NULLIF((last_snapshot - first_snapshot), 0), 2) AS "Avg Daily Size Growth (MB)",
    ROUND((max_used_mb - min_used_mb) / NULLIF((last_snapshot - first_snapshot), 0), 2) AS "Avg Daily Usage Growth (MB)",
    snapshot_count AS "Total Snapshots"
FROM growth_summary;

PROMPT

-- Data files information
PROMPT Tablespace Data Files:
PROMPT =====================

SELECT 
    file_name AS "File Name",
    ROUND(bytes/1024/1024, 2) AS "Size (MB)",
    ROUND(maxbytes/1024/1024, 2) AS "Max Size (MB)",
    autoextensible AS "Auto Extend",
    ROUND(increment_by * (SELECT value FROM v$parameter WHERE name = 'db_block_size')/1024/1024, 2) AS "Increment (MB)",
    status AS "Status"
FROM dba_data_files
WHERE UPPER(tablespace_name) = UPPER('&tablespace_name')
ORDER BY file_id;

PROMPT
PROMPT ================================================================================
PROMPT                            ANALYSIS COMPLETE
PROMPT ================================================================================

-- Reset settings
SET PAGESIZE 14
SET LINESIZE 80
SET ECHO ON
SET FEEDBACK ON
SET VERIFY ON

-- Clear the variable
UNDEFINE tablespace_name